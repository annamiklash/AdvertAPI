// <auto-generated />
using System;
using AdvertAPI.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AdvertAPI.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0-preview.5.20278.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AdvertAPI.Models.AccessToken", b =>
                {
                    b.Property<int>("IdAccessToken")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDateTime")
                        .HasColumnType("date");

                    b.Property<int>("IdClient")
                        .HasColumnType("int");

                    b.Property<DateTime>("IssueDateTime")
                        .HasColumnType("date");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("IdAccessToken")
                        .HasName("AccessToken_pk");

                    b.HasIndex("IdClient")
                        .IsUnique();

                    b.ToTable("AccessToken","apbd_project");
                });

            modelBuilder.Entity("AdvertAPI.Models.Banner", b =>
                {
                    b.Property<int>("IdAdvertisement")
                        .HasColumnType("int");

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal");

                    b.Property<int>("IdCampaign")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal");

                    b.HasKey("IdAdvertisement")
                        .HasName("Banner_pk");

                    b.HasIndex("IdCampaign");

                    b.ToTable("Banner","apbd_project");

                    b.HasData(
                        new
                        {
                            IdAdvertisement = 1,
                            Area = 7m,
                            IdCampaign = 1,
                            Name = "Name_1",
                            Price = 600m
                        },
                        new
                        {
                            IdAdvertisement = 2,
                            Area = 4m,
                            IdCampaign = 2,
                            Name = "Name_2",
                            Price = 300m
                        },
                        new
                        {
                            IdAdvertisement = 3,
                            Area = 5m,
                            IdCampaign = 4,
                            Name = "Name_3",
                            Price = 500m
                        },
                        new
                        {
                            IdAdvertisement = 4,
                            Area = 3m,
                            IdCampaign = 3,
                            Name = "Name_4",
                            Price = 360m
                        });
                });

            modelBuilder.Entity("AdvertAPI.Models.Building", b =>
                {
                    b.Property<int>("IdBuilding")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("StreetNumber")
                        .HasColumnType("int");

                    b.HasKey("IdBuilding")
                        .HasName("Building_pk");

                    b.ToTable("Building","apbd_project");

                    b.HasData(
                        new
                        {
                            IdBuilding = 1,
                            City = "Manhattan",
                            Height = 54.6m,
                            Street = "Wall",
                            StreetNumber = 33
                        },
                        new
                        {
                            IdBuilding = 2,
                            City = "Manhattan",
                            Height = 54.6m,
                            Street = "Wall",
                            StreetNumber = 34
                        },
                        new
                        {
                            IdBuilding = 3,
                            City = "Manhattan",
                            Height = 15.44m,
                            Street = "Astor Place",
                            StreetNumber = 1
                        },
                        new
                        {
                            IdBuilding = 4,
                            City = "Manhattan",
                            Height = 15.44m,
                            Street = "Astor Place",
                            StreetNumber = 3
                        },
                        new
                        {
                            IdBuilding = 5,
                            City = "Manhattan",
                            Height = 100.4m,
                            Street = "Bleecker",
                            StreetNumber = 68
                        },
                        new
                        {
                            IdBuilding = 6,
                            City = "Manhattan",
                            Height = 100.4m,
                            Street = "Bleecker",
                            StreetNumber = 69
                        },
                        new
                        {
                            IdBuilding = 7,
                            City = "Brooklyn",
                            Height = 28.5m,
                            Street = "Flatbush Ave",
                            StreetNumber = 80
                        },
                        new
                        {
                            IdBuilding = 8,
                            City = "Brooklyn",
                            Height = 28.5m,
                            Street = "Flatbush Ave",
                            StreetNumber = 81
                        });
                });

            modelBuilder.Entity("AdvertAPI.Models.Campaign", b =>
                {
                    b.Property<int>("IdCampaign")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("FromIdBuilding")
                        .HasColumnType("int");

                    b.Property<int>("IdClient")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerSquareMeter")
                        .HasColumnType("decimal");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("ToIdBuilding")
                        .HasColumnType("int");

                    b.HasKey("IdCampaign")
                        .HasName("Campaign_pk");

                    b.HasIndex("FromIdBuilding");

                    b.HasIndex("IdClient");

                    b.HasIndex("ToIdBuilding");

                    b.ToTable("Campaign","apbd_project");

                    b.HasData(
                        new
                        {
                            IdCampaign = 1,
                            EndDate = new DateTime(2020, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromIdBuilding = 1,
                            IdClient = 1,
                            PricePerSquareMeter = 120m,
                            StartDate = new DateTime(2020, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ToIdBuilding = 2
                        },
                        new
                        {
                            IdCampaign = 2,
                            EndDate = new DateTime(2020, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromIdBuilding = 3,
                            IdClient = 2,
                            PricePerSquareMeter = 200m,
                            StartDate = new DateTime(2020, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ToIdBuilding = 4
                        },
                        new
                        {
                            IdCampaign = 3,
                            EndDate = new DateTime(2020, 12, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromIdBuilding = 5,
                            IdClient = 3,
                            PricePerSquareMeter = 170m,
                            StartDate = new DateTime(2020, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ToIdBuilding = 6
                        },
                        new
                        {
                            IdCampaign = 4,
                            EndDate = new DateTime(2020, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromIdBuilding = 7,
                            IdClient = 2,
                            PricePerSquareMeter = 160m,
                            StartDate = new DateTime(2020, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ToIdBuilding = 8
                        });
                });

            modelBuilder.Entity("AdvertAPI.Models.Client", b =>
                {
                    b.Property<int>("IdClient")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("IdClient")
                        .HasName("Client_pk");

                    b.ToTable("Client","apbd_project");

                    b.HasData(
                        new
                        {
                            IdClient = 1,
                            Email = "jon@doe.com",
                            FirstName = "Jon",
                            LastName = "Doe",
                            Login = "jondoe",
                            Password = "8NlfdeHbQNTUHu9iI2ry1G2n8kCkvAmBVXM7KbbxfiIjuI8nL+Agn/2V6aoP2y3+SzhFjm7gmX/hklwIbPEob0m2nsCdvZ9USOat3TzEQlZ+6+WIweFGV18SwxAHnDJoqGxGQiN8sszvbou0Ffkox/FRgWyvW5HUUA/L57u/Lx1I0WEDC7NrxK9x25L67m1+ENSyTJfkSKUC/A1EDbH8yqJBojlK0SeGX2UwP1VwrD3tejNJt3hfVQPvaqcDjuw0EVqvqC/fXrXJQ8obJyVFLj2v1AcZgrzHTJ0L5MHvDt2ItnkjKWqYcCPF1ruAxxDif1G1pCd/+o8UTHFXcTrT6A==",
                            Phone = "66666666"
                        },
                        new
                        {
                            IdClient = 2,
                            Email = "michal@scott.com",
                            FirstName = "Michal",
                            LastName = "Scott",
                            Login = "dunder_mifflin",
                            Password = "Vp/A53X+PQqKwcx1X7CG5XSzDfTLXLptAZ44+8ABS5J7r0JBEozdxg0VFPj09YgbyoEtX391ACoGg8m/Wj3sge8yZWmC/iKsBbP24sPJy1ojP9sI48ngn62t5Ek2uxExM+RI3xh+NHAi+xVrBgge/1hnaE1pARuX5WP1Z8EECTXA87UsVImoB3lP4Te/wUwA6LbRqNXU45+UrZaWt/OPlHcmjhgcPbGc+oV5ezEw0TFiA2yXHlT67lArEViY66nUf1vrl5mCosITfpAbgl73/OEJ3ExwUP4x97QcI654zAI2EBFVf9kGAMHfrqwOUW20bVlW24Bes0HXjMz0a3kqvg==",
                            Phone = "5720935"
                        },
                        new
                        {
                            IdClient = 3,
                            Email = "Jack@Daniels.com",
                            FirstName = "Jack",
                            LastName = "Daniels",
                            Login = "bourbon",
                            Password = "EdFNDpl6W4NrpGVi7X5iHqq6Squ7Nr5RbRYV3JrjLeXc65J0nGLml/kyudfAwppu+igiaeWoYc6VyiPIuGagWj0H6Ozt4vLH0/KUsLM0c2LxxT7iI3e6qdPZ2YkTYLN4a6x3qMfOh3BB4jvKJ3A/9MYERuZBu8jRnU5iZw/BG2HDI1e8B8yvkEVXUzMfDXU3FHlnbDXg+Gww6R35TsSzcd7lGIexhF2lgM5ySaCKn3kpF2qpgWXpwyj9waXdEobwoEW/0anrvuQYa9K3otpzcFwXLq/d0+7Rd8fgdq+8C/3wdS9kHhmW5AiQwsIrv67WihfcmCE1UIKXv85gwPGlEw==",
                            Phone = "1234567878"
                        });
                });

            modelBuilder.Entity("AdvertAPI.Models.RefreshToken", b =>
                {
                    b.Property<int>("IdRefreshToken")
                        .HasColumnType("int");

                    b.Property<int>("IdClient")
                        .HasColumnType("int");

                    b.Property<DateTime>("IssueDateTime")
                        .HasColumnType("date");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("IdRefreshToken")
                        .HasName("RefreshToken_pk");

                    b.HasIndex("IdClient")
                        .IsUnique();

                    b.ToTable("RefreshToken","apbd_project");
                });

            modelBuilder.Entity("AdvertAPI.Models.AccessToken", b =>
                {
                    b.HasOne("AdvertAPI.Models.Client", "Client")
                        .WithOne("AccessToken")
                        .HasForeignKey("AdvertAPI.Models.AccessToken", "IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdvertAPI.Models.Banner", b =>
                {
                    b.HasOne("AdvertAPI.Models.Campaign", "Campaign")
                        .WithMany("Banner")
                        .HasForeignKey("IdCampaign")
                        .HasConstraintName("Campaign_Banner")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdvertAPI.Models.Campaign", b =>
                {
                    b.HasOne("AdvertAPI.Models.Building", "FromBuilding")
                        .WithMany("CampaignFrom")
                        .HasForeignKey("FromIdBuilding")
                        .HasConstraintName("FromBuilding_Campaign")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdvertAPI.Models.Client", "Client")
                        .WithMany("Campaign")
                        .HasForeignKey("IdClient")
                        .HasConstraintName("Client_Campaign")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdvertAPI.Models.Building", "ToBuilding")
                        .WithMany("CampaignTo")
                        .HasForeignKey("ToIdBuilding")
                        .HasConstraintName("ToBuilding_Campaign")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("AdvertAPI.Models.RefreshToken", b =>
                {
                    b.HasOne("AdvertAPI.Models.Client", "Client")
                        .WithOne("RefreshToken")
                        .HasForeignKey("AdvertAPI.Models.RefreshToken", "IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
